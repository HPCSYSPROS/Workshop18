#!/bin/bash
##
# SLURM health check program
# ulf.tigerstedt@csc.fi 2012
# johan.guldmyr@csc.fi 2014
# john.blaas@colorado.edu 2017-19
# 
# Usage:
# scontrol update node=ae5 state=drain reason=reboot
# What happens:
# When the node is drained slurm reason field is changed to "rebooting" and then it is rebooted.
# When slurm on the node is back online nhc will on the next run resume the node.

FAILED=0
ERROR=""
HOSTNAME=`hostname -s`
DEBUG=""
TIMEOUT=900

# Grab information on the node in one line
STATELINE=`scontrol -o show node $HOSTNAME`
# Check if this is a SLURM worker node at all
if [ $? = 1 ] ; then
    #echo Not a slurm node
    exit
fi
if [ "$1" = "-d" ]; then
    DEBUG="1"
fi

check_reboot_slurm() {
# The name of this function is defined in nhc.conf as a check.

# do some processing on the stateline variable, we break the line up into KV pairs and then use awk to display
# the correct value of the pair
STATE=`echo $STATELINE | sed -r 's/[[:alnum:]]+=/\n&/g' | awk -F= '$1=="State"{print $2}'`
REASON=`echo $STATELINE | sed -r 's/[[:alnum:]]+=/\n&/g' | awk -F= '$1=="Reason"{print $2}'`

if [ -n "$DEBUG" ]; then echo Slurm thinks $HOSTNAME has STATE=$STATE and REASON=$REASON; fi

if [[ $REASON = *"rebooting"* ]]; then
    if [ -n "$DEBUG" ]; then echo Resuming after reboot ; fi
    # Try to get GPFS mounted before RESUMING service
    /usr/lpp/mmfs/bin/mmsdrrestore
    sleep 15
    /usr/lpp/mmfs/bin/mmstartup
    sleep 15
    /usr/lpp/mmfs/bin/mmmount all
    # Set node back to production
    echo "I am returning this node back to production following a successful reboot" | /curc/admin/scripts/slacktee -p -t "Releasing node $(hostname) back to production" -a "good"
    scontrol update NodeName=$HOSTNAME state=RESUME reason=""
fi

if [[ $REASON = *"update"* ]]; then
    if [ $STATE = "IDLE+DRAIN" -o $STATE = "RESERVED" -o $STATE = "DOWN+IDLE" -o $STATE = "DOWN" -o $STATE = "RESERVED+DRAIN" -o $STATE = "DOWN+RESERVED" -o $STATE = "DOWN+DRAIN" -o $STATE = "MAINT+DRAIN" ]; then
        if [ -n "$DEBUG" ]; then echo Rebooting ; fi
        sleep 2
        # Shutdown GPFS and give it 30 seconds
        mmshutdown
        sleep 30
        # stop slurm just in case
        scontrol update NodeName=$HOSTNAME state=DOWN reason="rebooting"
        echo "I am starting the reboot process on this node since its Reason was marked as update" | /curc/admin/scripts/slacktee -p -t "Rebooting node $(hostname)" -a "good" 
        service slurm stop
        sleep 2
        /sbin/reboot
    fi
fi

# Start remediation portion of code
if [[ $REASON = *"Kill task failed"* ]]; then
    if [ $STATE = "IDLE+DRAIN" -o $STATE = "RESERVED" -o $STATE = "DOWN+IDLE" -o $STATE = "DOWN" -o $STATE = "RESERVED+DRAIN" -o $STATE = "DOWN+RESERVED" -o $STATE = "DOWN+DRAIN" -o $STATE = "MAINT+DRAIN" ]; then
        if [ -n "$DEBUG" ]; then echo Rebooting ; fi
        sleep 2
        # Shutdown GPFS and give it 30 seconds
        mmshutdown
        sleep 30
        # stop slurm just in case
        scontrol update NodeName=$HOSTNAME state=DOWN reason="rebooting"
        echo "I noticed this node has a Reason of Kill task failed, I am going to reboot this node to resolve the issue" | /curc/admin/scripts/slacktee -p -t "Rebooting node $(hostname) because of Reason Kill task failed" -a "warning"
        service slurm stop
        sleep 2
        /sbin/reboot
    fi
fi

if [[ $REASON = *"Service gpfs-summit.mount"* ]]; then
    if [ $STATE = "IDLE+DRAIN" -o $STATE = "RESERVED" -o $STATE = "DOWN+IDLE" -o $STATE = "DOWN" -o $STATE = "RESERVED+DRAIN" -o $STATE = "DOWN+RESERVED" -o $STATE = "DOWN+DRAIN" -o $STATE = "MAINT+DRAIN" ]; then
        if /usr/lpp/mmfs/bin/mmsdrrestore ; then
            /usr/lpp/mmfs/bin/mmstartup
            sleep 20
            /usr/lpp/mmfs/bin/mmmount all
            echo "I noticed this node didn't have GPFS mounted, so I went ahead and issued a mmsdrrestore and successfully started and mounted GPFS." | /curc/admin/scripts/slacktee -p -t "Started GPFS on $(hostname) after detecting the lack of GPFS mounts" -a "good"
        else
            echo "This is embarrassing, I was unable to get GPFS mounted. Please assist me in returning this node to service" | /curc/admin/scripts/slacktee -p -t "Setting node $(hostname) to state of down" -a "danger"
            scontrol update NodeName=$HOSTNAME state=DOWN reason="Issues with GPFS"
        fi
    fi
fi

if [[ $REASON = *"/gpfs/summit not mounted"* ]]; then
    if [ $STATE = "IDLE+DRAIN" -o $STATE = "RESERVED" -o $STATE = "DOWN+IDLE" -o $STATE = "DOWN" -o $STATE = "RESERVED+DRAIN" -o $STATE = "DOWN+RESERVED" -o $STATE = "DOWN+DRAIN" -o $STATE = "MAINT+DRAIN" ]; then
        if /usr/lpp/mmfs/bin/mmsdrrestore ; then
            /usr/lpp/mmfs/bin/mmstartup
            sleep 20
            /usr/lpp/mmfs/bin/mmmount all
            echo "I noticed this node didn't have GPFS mounted, so I went ahead and issued a mmsdrrestore and successfully started and mounted GPFS." | /curc/admin/scripts/slacktee -p -t "Started GPFS on $(hostname) after detecting the lack of GPFS mounts" -a "good"
        else
            echo "This is embarrassing, I was unable to get GPFS mounted. Please assist me in returning this node to service" | /curc/admin/scripts/slacktee -p -t "Setting node $(hostname) to state of down" -a "danger"
            scontrol update NodeName=$HOSTNAME state=DOWN reason="Issues with GPFS"
        fi
    fi
fi

if [ -n "$DEBUG" ]; then echo Health check done; fi

}

